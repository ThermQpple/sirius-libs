import java.nio.file.Paths

plugins {
    id "com.jfrog.artifactory" version "4.3.0"
}

//Global Properties
ext {
    logger.lifecycle('reading gradle properties file...')
    File propertiesFile = Paths.get(System.properties['user.home'], 'gradle.properties').toFile()
    getLogger().lifecycle("Loading properties from ${propertiesFile.absolutePath}")
    Properties props = new Properties()

    propertiesFile.withReader("UTF8", {
        props.load(it)
    })
    System.properties.putAll(props)
    logger.lifecycle('reading build properties file...')
    props = new Properties()
    File propertiesFileIn = new File("${projectDir}/src/main/resources/sirius.build.properties")
    propertiesFileIn.withReader("UTF8", {
        props.load(it)
    })
    System.properties.putAll(props)


    siriusVersion = System.getProperty('de.unijena.bioinf.sirius.version')
    //version for external libraries
    jjobs_version = '0.9.5'
    slf4j_version = '1.7.25'
    gson_version = '2.6.2'
    math3_version = '3.+'
    glpk_version = System.getProperty('de.unijena.bioinf.sirius.build.glpk_version')
    gurobi_version = System.getProperty('de.unijena.bioinf.sirius.build.gurobi_version')
    cplex_version = System.getProperty('de.unijena.bioinf.sirius.build.cplex_version')
    graphUtils_version = '1.1'

    jewelcli_version = '0.8.+'
    //todo wenn wir die inhouse clis auch ind das frontend moven haben wir keinerlei distribution zeug mehr in sirius


}

allprojects {
    apply plugin: "com.jfrog.artifactory"
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8


    version = project.siriusVersion
    group = 'de.unijena.bioinf.ms'

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://bio.informatik.uni-jena.de/repository/local"
            credentials {
                username = System.properties['de.unijena.bioinf.build.artifactory.username']
                password = System.properties['de.unijena.bioinf.build.artifactory.password']
            }
        }
        maven {
            url "http://www.ebi.ac.uk/Tools/maven/repos/content/groups/ebi-repo/"
            //url "http://www.ebi.ac.uk/intact/maven/nexus/content/repositories/ebi-repo"
        }
        maven {
            url "https://www.xypron.de/repository" //glpk repo
        }
    }

    dependencies {
        compile 'net.sf.trove4j:trove4j:3.0.3'
        compile 'com.google.guava:guava:18.0'
        testCompile group: 'junit', name: 'junit', version: '4.12'
    }

    task sourceJar(type: Jar) {
        group = 'build'
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        group = 'documentation'
        classifier = 'javadoc'
        from javadoc.destinationDir
    }


    publishing {
        publications {
            mavenJava(MavenPublication) {
                from project.components.java
                //adding submodules to pom
                pom.withXml {
                    if (!project.subprojects.isEmpty()) {
                        def modlules = asNode().appendNode('modules', '')
                        project.subprojects.each {
                            new Node(modlules, 'module', it.name)
                        }
                    }
                }
                setArtifacts([])
            }
        }
    }
}

def javaProjects() {
    subprojects.findAll { new File(it.projectDir, 'src').directory }
}

configure(javaProjects()) {
    publishing {
        publications {
            mavenJava(MavenPublication) {
//                from project.components.java
                if (version.toString().endsWith('-SNAPSHOT'))
                    setArtifacts([jar, sourceJar])
                else
                    setArtifacts([jar, sourceJar, javadocJar])
            }
        }
    }
}

//artifactoryPublish.skip = true
artifactory {
    contextUrl = 'https://bio.informatik.uni-jena.de/repository/'
    publish {
        repository {
            if (version.toString().endsWith('-SNAPSHOT'))
                repoKey = 'libs-snapshot-local'
            else
                repoKey = 'libs-release-local'

            username = System.getProperty('de.unijena.bioinf.build.artifactory.username')
            password = System.getProperty('de.unijena.bioinf.build.artifactory.password')
        }
        defaults {
            publications('mavenJava')
        }
    }
}

